//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientWPF.CloudService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudService.ICloudService")]
    public interface ICloudService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        string GetUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<string> GetUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        void AddUser(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUser", ReplyAction="http://tempuri.org/IUserService/RemoveUserResponse")]
        bool RemoveUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUser", ReplyAction="http://tempuri.org/IUserService/RemoveUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginUser", ReplyAction="http://tempuri.org/IUserService/LoginUserResponse")]
        bool LoginUser(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginUser", ReplyAction="http://tempuri.org/IUserService/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LogoutUser", ReplyAction="http://tempuri.org/IUserService/LogoutUserResponse")]
        bool LogoutUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LogoutUser", ReplyAction="http://tempuri.org/IUserService/LogoutUserResponse")]
        System.Threading.Tasks.Task<bool> LogoutUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePasswordUser", ReplyAction="http://tempuri.org/IUserService/ChangePasswordUserResponse")]
        bool ChangePasswordUser(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePasswordUser", ReplyAction="http://tempuri.org/IUserService/ChangePasswordUserResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordUserAsync(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAuthInfo", ReplyAction="http://tempuri.org/IUserService/GetAuthInfoResponse")]
        string GetAuthInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAuthInfo", ReplyAction="http://tempuri.org/IUserService/GetAuthInfoResponse")]
        System.Threading.Tasks.Task<string> GetAuthInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/AddFolder", ReplyAction="http://tempuri.org/IArchiveFolderService/AddFolderResponse")]
        void AddFolder(string name, int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/AddFolder", ReplyAction="http://tempuri.org/IArchiveFolderService/AddFolderResponse")]
        System.Threading.Tasks.Task AddFolderAsync(string name, int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFolders", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersResponse")]
        string GetFolders(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFolders", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersResponse")]
        System.Threading.Tasks.Task<string> GetFoldersAsync(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFoldersJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersJsonResponse")]
        string GetFoldersJson(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFoldersJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersJsonResponse")]
        System.Threading.Tasks.Task<string> GetFoldersJsonAsync(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetCloudJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetCloudJsonResponse")]
        string GetCloudJson(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetCloudJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetCloudJsonResponse")]
        System.Threading.Tasks.Task<string> GetCloudJsonAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetData", ReplyAction="http://tempuri.org/IArchiveFolderService/GetDataResponse")]
        string[] GetData(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetData", ReplyAction="http://tempuri.org/IArchiveFolderService/GetDataResponse")]
        System.Threading.Tasks.Task<string[]> GetDataAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/Hello", ReplyAction="http://tempuri.org/ICloudService/HelloResponse")]
        string Hello();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICloudService/Hello", ReplyAction="http://tempuri.org/ICloudService/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICloudServiceChannel : ClientWPF.CloudService.ICloudService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CloudServiceClient : System.ServiceModel.ClientBase<ClientWPF.CloudService.ICloudService>, ClientWPF.CloudService.ICloudService {
        
        public CloudServiceClient() {
        }
        
        public CloudServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CloudServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CloudServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetUser(string name) {
            return base.Channel.GetUser(name);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAsync(string name) {
            return base.Channel.GetUserAsync(name);
        }
        
        public void AddUser(string name, string password) {
            base.Channel.AddUser(name, password);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(string name, string password) {
            return base.Channel.AddUserAsync(name, password);
        }
        
        public bool RemoveUser(string name) {
            return base.Channel.RemoveUser(name);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAsync(string name) {
            return base.Channel.RemoveUserAsync(name);
        }
        
        public bool LoginUser(string name, string password) {
            return base.Channel.LoginUser(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string name, string password) {
            return base.Channel.LoginUserAsync(name, password);
        }
        
        public bool LogoutUser(int userId) {
            return base.Channel.LogoutUser(userId);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutUserAsync(int userId) {
            return base.Channel.LogoutUserAsync(userId);
        }
        
        public bool ChangePasswordUser(string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordUser(oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordUserAsync(string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordUserAsync(oldPassword, newPassword);
        }
        
        public string GetAuthInfo() {
            return base.Channel.GetAuthInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetAuthInfoAsync() {
            return base.Channel.GetAuthInfoAsync();
        }
        
        public void AddFolder(string name, int parentFolderId) {
            base.Channel.AddFolder(name, parentFolderId);
        }
        
        public System.Threading.Tasks.Task AddFolderAsync(string name, int parentFolderId) {
            return base.Channel.AddFolderAsync(name, parentFolderId);
        }
        
        public string GetFolders(int parentFolderId) {
            return base.Channel.GetFolders(parentFolderId);
        }
        
        public System.Threading.Tasks.Task<string> GetFoldersAsync(int parentFolderId) {
            return base.Channel.GetFoldersAsync(parentFolderId);
        }
        
        public string GetFoldersJson(int parentFolderId) {
            return base.Channel.GetFoldersJson(parentFolderId);
        }
        
        public System.Threading.Tasks.Task<string> GetFoldersJsonAsync(int parentFolderId) {
            return base.Channel.GetFoldersJsonAsync(parentFolderId);
        }
        
        public string GetCloudJson(int userId) {
            return base.Channel.GetCloudJson(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetCloudJsonAsync(int userId) {
            return base.Channel.GetCloudJsonAsync(userId);
        }
        
        public string[] GetData(int userId) {
            return base.Channel.GetData(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDataAsync(int userId) {
            return base.Channel.GetDataAsync(userId);
        }
        
        public string Hello() {
            return base.Channel.Hello();
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync() {
            return base.Channel.HelloAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        string GetUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<string> GetUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        void AddUser(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUser", ReplyAction="http://tempuri.org/IUserService/RemoveUserResponse")]
        bool RemoveUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUser", ReplyAction="http://tempuri.org/IUserService/RemoveUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginUser", ReplyAction="http://tempuri.org/IUserService/LoginUserResponse")]
        bool LoginUser(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LoginUser", ReplyAction="http://tempuri.org/IUserService/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LogoutUser", ReplyAction="http://tempuri.org/IUserService/LogoutUserResponse")]
        bool LogoutUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/LogoutUser", ReplyAction="http://tempuri.org/IUserService/LogoutUserResponse")]
        System.Threading.Tasks.Task<bool> LogoutUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePasswordUser", ReplyAction="http://tempuri.org/IUserService/ChangePasswordUserResponse")]
        bool ChangePasswordUser(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ChangePasswordUser", ReplyAction="http://tempuri.org/IUserService/ChangePasswordUserResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordUserAsync(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAuthInfo", ReplyAction="http://tempuri.org/IUserService/GetAuthInfoResponse")]
        string GetAuthInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAuthInfo", ReplyAction="http://tempuri.org/IUserService/GetAuthInfoResponse")]
        System.Threading.Tasks.Task<string> GetAuthInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : ClientWPF.CloudService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<ClientWPF.CloudService.IUserService>, ClientWPF.CloudService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetUser(string name) {
            return base.Channel.GetUser(name);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAsync(string name) {
            return base.Channel.GetUserAsync(name);
        }
        
        public void AddUser(string name, string password) {
            base.Channel.AddUser(name, password);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(string name, string password) {
            return base.Channel.AddUserAsync(name, password);
        }
        
        public bool RemoveUser(string name) {
            return base.Channel.RemoveUser(name);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAsync(string name) {
            return base.Channel.RemoveUserAsync(name);
        }
        
        public bool LoginUser(string name, string password) {
            return base.Channel.LoginUser(name, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string name, string password) {
            return base.Channel.LoginUserAsync(name, password);
        }
        
        public bool LogoutUser(int userId) {
            return base.Channel.LogoutUser(userId);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutUserAsync(int userId) {
            return base.Channel.LogoutUserAsync(userId);
        }
        
        public bool ChangePasswordUser(string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordUser(oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordUserAsync(string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordUserAsync(oldPassword, newPassword);
        }
        
        public string GetAuthInfo() {
            return base.Channel.GetAuthInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetAuthInfoAsync() {
            return base.Channel.GetAuthInfoAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudService.IArchiveFolderService")]
    public interface IArchiveFolderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/AddFolder", ReplyAction="http://tempuri.org/IArchiveFolderService/AddFolderResponse")]
        void AddFolder(string name, int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/AddFolder", ReplyAction="http://tempuri.org/IArchiveFolderService/AddFolderResponse")]
        System.Threading.Tasks.Task AddFolderAsync(string name, int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFolders", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersResponse")]
        string GetFolders(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFolders", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersResponse")]
        System.Threading.Tasks.Task<string> GetFoldersAsync(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFoldersJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersJsonResponse")]
        string GetFoldersJson(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetFoldersJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetFoldersJsonResponse")]
        System.Threading.Tasks.Task<string> GetFoldersJsonAsync(int parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetCloudJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetCloudJsonResponse")]
        string GetCloudJson(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetCloudJson", ReplyAction="http://tempuri.org/IArchiveFolderService/GetCloudJsonResponse")]
        System.Threading.Tasks.Task<string> GetCloudJsonAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetData", ReplyAction="http://tempuri.org/IArchiveFolderService/GetDataResponse")]
        string[] GetData(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IArchiveFolderService/GetData", ReplyAction="http://tempuri.org/IArchiveFolderService/GetDataResponse")]
        System.Threading.Tasks.Task<string[]> GetDataAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IArchiveFolderServiceChannel : ClientWPF.CloudService.IArchiveFolderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArchiveFolderServiceClient : System.ServiceModel.ClientBase<ClientWPF.CloudService.IArchiveFolderService>, ClientWPF.CloudService.IArchiveFolderService {
        
        public ArchiveFolderServiceClient() {
        }
        
        public ArchiveFolderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ArchiveFolderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ArchiveFolderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ArchiveFolderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddFolder(string name, int parentFolderId) {
            base.Channel.AddFolder(name, parentFolderId);
        }
        
        public System.Threading.Tasks.Task AddFolderAsync(string name, int parentFolderId) {
            return base.Channel.AddFolderAsync(name, parentFolderId);
        }
        
        public string GetFolders(int parentFolderId) {
            return base.Channel.GetFolders(parentFolderId);
        }
        
        public System.Threading.Tasks.Task<string> GetFoldersAsync(int parentFolderId) {
            return base.Channel.GetFoldersAsync(parentFolderId);
        }
        
        public string GetFoldersJson(int parentFolderId) {
            return base.Channel.GetFoldersJson(parentFolderId);
        }
        
        public System.Threading.Tasks.Task<string> GetFoldersJsonAsync(int parentFolderId) {
            return base.Channel.GetFoldersJsonAsync(parentFolderId);
        }
        
        public string GetCloudJson(int userId) {
            return base.Channel.GetCloudJson(userId);
        }
        
        public System.Threading.Tasks.Task<string> GetCloudJsonAsync(int userId) {
            return base.Channel.GetCloudJsonAsync(userId);
        }
        
        public string[] GetData(int userId) {
            return base.Channel.GetData(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDataAsync(int userId) {
            return base.Channel.GetDataAsync(userId);
        }
    }
}
