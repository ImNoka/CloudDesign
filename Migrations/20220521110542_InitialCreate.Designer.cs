// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerEntityDataWCF.Model;

namespace ServerEntityDataWCF.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20220521110542_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ServerEntityDataWCF.Model.ArchiveFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("UserFolderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("UserFolderId");

                    b.ToTable("ArchiveFiles");
                });

            modelBuilder.Entity("ServerEntityDataWCF.Model.ArchiveFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ArchiveFolderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserFolderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveFolderId");

                    b.HasIndex("UserFolderId");

                    b.ToTable("ArchiveFolders");
                });

            modelBuilder.Entity("ServerEntityDataWCF.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServerEntityDataWCF.Model.UserCloud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCloud");
                });

            modelBuilder.Entity("ServerEntityDataWCF.Model.ArchiveFile", b =>
                {
                    b.HasOne("ServerEntityDataWCF.Model.ArchiveFolder", "ParentFolder")
                        .WithMany("Files")
                        .HasForeignKey("ParentFolderId");

                    b.HasOne("ServerEntityDataWCF.Model.UserCloud", null)
                        .WithMany("Files")
                        .HasForeignKey("UserFolderId");
                });

            modelBuilder.Entity("ServerEntityDataWCF.Model.ArchiveFolder", b =>
                {
                    b.HasOne("ServerEntityDataWCF.Model.ArchiveFolder", null)
                        .WithMany("Folders")
                        .HasForeignKey("ArchiveFolderId");

                    b.HasOne("ServerEntityDataWCF.Model.UserCloud", null)
                        .WithMany("ArchiveFolders")
                        .HasForeignKey("UserFolderId");
                });

            modelBuilder.Entity("ServerEntityDataWCF.Model.UserCloud", b =>
                {
                    b.HasOne("ServerEntityDataWCF.Model.User", null)
                        .WithOne("UserCloud")
                        .HasForeignKey("ServerEntityDataWCF.Model.UserCloud", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
